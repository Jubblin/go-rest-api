// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package models

import (
	"errors"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type deviceActivity_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var DeviceActivityBinding = deviceActivity_EntityInfo{
	Entity: objectbox.Entity{
		Id: 1,
	},
	Uid: 2906110396233178886,
}

// DeviceActivity_ contains type-based Property helpers to facilitate some common operations such as Queries.
var DeviceActivity_ = struct {
	Id         *objectbox.PropertyUint64
	UniqueId   *objectbox.PropertyString
	SourceIP   *objectbox.PropertyString
	DeviceName *objectbox.PropertyString
	GridName   *objectbox.PropertyString
	Action     *objectbox.PropertyString
	Headers    *objectbox.PropertyString
	Timestamp  *objectbox.PropertyInt64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
	UniqueId: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
	SourceIP: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
	DeviceName: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
	GridName: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
	Action: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
	Headers: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
	Timestamp: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &DeviceActivityBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (deviceActivity_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (deviceActivity_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("DeviceActivity", 1, 2906110396233178886)
	model.Property("Id", 6, 1, 4132809060673372632)
	model.PropertyFlags(1)
	model.Property("UniqueId", 9, 2, 8395261497107256084)
	model.PropertyFlags(2080)
	model.PropertyIndex(1, 1580507996290653868)
	model.Property("SourceIP", 9, 3, 207645094317886919)
	model.Property("DeviceName", 9, 4, 4014128336778729508)
	model.PropertyFlags(2048)
	model.PropertyIndex(2, 1468695394773926369)
	model.Property("GridName", 9, 5, 7529419088693152042)
	model.PropertyFlags(2048)
	model.PropertyIndex(3, 5847086806180283837)
	model.Property("Action", 9, 6, 5276800250942670244)
	model.Property("Headers", 9, 7, 2732099102083057548)
	model.Property("Timestamp", 10, 8, 4996867769747770200)
	model.EntityLastPropertyId(8, 4996867769747770200)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (deviceActivity_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*DeviceActivity).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (deviceActivity_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*DeviceActivity).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (deviceActivity_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (deviceActivity_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*DeviceActivity)
	var propTimestamp int64
	{
		var err error
		propTimestamp, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.Timestamp)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on DeviceActivity.Timestamp: " + err.Error())
		}
	}

	var offsetUniqueId = fbutils.CreateStringOffset(fbb, obj.UniqueId)
	var offsetSourceIP = fbutils.CreateStringOffset(fbb, obj.SourceIP)
	var offsetDeviceName = fbutils.CreateStringOffset(fbb, obj.DeviceName)
	var offsetGridName = fbutils.CreateStringOffset(fbb, obj.GridName)
	var offsetAction = fbutils.CreateStringOffset(fbb, obj.Action)
	var offsetHeaders = fbutils.CreateStringOffset(fbb, obj.Headers)

	// build the FlatBuffers object
	fbb.StartObject(8)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetUOffsetTSlot(fbb, 1, offsetUniqueId)
	fbutils.SetUOffsetTSlot(fbb, 2, offsetSourceIP)
	fbutils.SetUOffsetTSlot(fbb, 3, offsetDeviceName)
	fbutils.SetUOffsetTSlot(fbb, 4, offsetGridName)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetAction)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetHeaders)
	fbutils.SetInt64Slot(fbb, 7, propTimestamp)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (deviceActivity_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'DeviceActivity' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(4, 0)

	propTimestamp, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 18))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on DeviceActivity.Timestamp: " + err.Error())
	}

	return &DeviceActivity{
		Id:         propId,
		UniqueId:   fbutils.GetStringSlot(table, 6),
		SourceIP:   fbutils.GetStringSlot(table, 8),
		DeviceName: fbutils.GetStringSlot(table, 10),
		GridName:   fbutils.GetStringSlot(table, 12),
		Action:     fbutils.GetStringSlot(table, 14),
		Headers:    fbutils.GetStringSlot(table, 16),
		Timestamp:  propTimestamp,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (deviceActivity_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*DeviceActivity, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (deviceActivity_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*DeviceActivity), nil)
	}
	return append(slice.([]*DeviceActivity), object.(*DeviceActivity))
}

// Box provides CRUD access to DeviceActivity objects
type DeviceActivityBox struct {
	*objectbox.Box
}

// BoxForDeviceActivity opens a box of DeviceActivity objects
func BoxForDeviceActivity(ob *objectbox.ObjectBox) *DeviceActivityBox {
	return &DeviceActivityBox{
		Box: ob.InternalBox(1),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the DeviceActivity.Id property on the passed object will be assigned the new ID as well.
func (box *DeviceActivityBox) Put(object *DeviceActivity) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the DeviceActivity.Id property on the passed object will be assigned the new ID as well.
func (box *DeviceActivityBox) Insert(object *DeviceActivity) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *DeviceActivityBox) Update(object *DeviceActivity) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *DeviceActivityBox) PutAsync(object *DeviceActivity) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the DeviceActivity.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the DeviceActivity.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *DeviceActivityBox) PutMany(objects []*DeviceActivity) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *DeviceActivityBox) Get(id uint64) (*DeviceActivity, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*DeviceActivity), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *DeviceActivityBox) GetMany(ids ...uint64) ([]*DeviceActivity, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*DeviceActivity), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *DeviceActivityBox) GetManyExisting(ids ...uint64) ([]*DeviceActivity, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*DeviceActivity), nil
}

// GetAll reads all stored objects
func (box *DeviceActivityBox) GetAll() ([]*DeviceActivity, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*DeviceActivity), nil
}

// Remove deletes a single object
func (box *DeviceActivityBox) Remove(object *DeviceActivity) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *DeviceActivityBox) RemoveMany(objects ...*DeviceActivity) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the DeviceActivity_ struct to create conditions.
// Keep the *DeviceActivityQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *DeviceActivityBox) Query(conditions ...objectbox.Condition) *DeviceActivityQuery {
	return &DeviceActivityQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the DeviceActivity_ struct to create conditions.
// Keep the *DeviceActivityQuery if you intend to execute the query multiple times.
func (box *DeviceActivityBox) QueryOrError(conditions ...objectbox.Condition) (*DeviceActivityQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &DeviceActivityQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See DeviceActivityAsyncBox for more information.
func (box *DeviceActivityBox) Async() *DeviceActivityAsyncBox {
	return &DeviceActivityAsyncBox{AsyncBox: box.Box.Async()}
}

// DeviceActivityAsyncBox provides asynchronous operations on DeviceActivity objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type DeviceActivityAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForDeviceActivity creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use DeviceActivityBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForDeviceActivity(ob *objectbox.ObjectBox, timeoutMs uint64) *DeviceActivityAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 1, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 1: %s" + err.Error())
	}
	return &DeviceActivityAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *DeviceActivityAsyncBox) Put(object *DeviceActivity) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *DeviceActivityAsyncBox) Insert(object *DeviceActivity) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *DeviceActivityAsyncBox) Update(object *DeviceActivity) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *DeviceActivityAsyncBox) Remove(object *DeviceActivity) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all DeviceActivity which Id is either 42 or 47:
//
// box.Query(DeviceActivity_.Id.In(42, 47)).Find()
type DeviceActivityQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *DeviceActivityQuery) Find() ([]*DeviceActivity, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*DeviceActivity), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *DeviceActivityQuery) Offset(offset uint64) *DeviceActivityQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *DeviceActivityQuery) Limit(limit uint64) *DeviceActivityQuery {
	query.Query.Limit(limit)
	return query
}
