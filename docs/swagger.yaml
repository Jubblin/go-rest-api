basePath: /api/v1
definitions:
  models.Book:
    properties:
      author:
        type: string
      description:
        type: string
      id:
        type: string
      price:
        type: number
      title:
        type: string
    required:
    - author
    - description
    - price
    - title
    type: object
host: localhost:8080
info:
  contact: {}
  description: A simple book management API.
  title: Book API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Returns a list of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Creates a new book with the provided details
      parameters:
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            type: string
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Returns a single book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Updates a book's details by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update a book
      tags:
      - books
  /health:
    get:
      consumes:
      - application/json
      description: Returns OK if the service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check endpoint
      tags:
      - health
swagger: "2.0"
